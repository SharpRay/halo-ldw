// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES ORF CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

package org.rzlabs.analysis;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;

import org.rzlabs.common.AnalysisException;

import java_cup.runtime.Symbol;

// Commented by Zhao Chun
// Now we have 2 shift/reduce conflict
// between TIMESTAMP "20100101" and TIMESTAMP "alias"
// between DATE "20100101" and DATE "alias"

parser code {:
    private Symbol errorToken;
    public boolean isVerbose = false;
    public String wild;
//    public Expr where;

    // List of expected tokens ids from current parsing state for generating syntax error message
    private final List<Integer> expectedTokenIds = Lists.newArrayList();

    // To avoid reporting trivial tokens as expected tokens in error messages
    private boolean reportExpectedToken(Integer tokenId) {
        if (SqlScanner.isKeyword(tokenId) ||
                tokenId.intValue() == SqlParserSymbols.COMMA ||
                tokenId.intValue() == SqlParserSymbols.DOT ||
                tokenId.intValue() == SqlParserSymbols.IDENT) {
            return true;
        } else {
            return false;
        }
    }

    private String getErrorTypeMessage(int lastTokenId) {
        String msg = null;
        switch(lastTokenId) {
            case SqlParserSymbols.UNMATCHED_STRING_LITERAL:
                msg = "Unmatched string literal";
                break;
            case SqlParserSymbols.NUMERIC_OVERFLOW:
                msg = "Numeric overflow";
                break;
            default:
                msg = "Syntax error";
                break;
        }
        return msg;
    }

    // Override to save error token, just update error information.
    @Override
    public void syntax_error(Symbol token) {
        errorToken = token;

        // derive expected tokens from current parsing state
        expectedTokenIds.clear();
        int state = ((Symbol)stack.peek()).parse_state;
        // get row of actions table corresponding to current parsing state
        // the row consists of pairs of <tokenId, actionId>
        // a pair is stored as row[i] (tokenId) and row[i+1] (actionId)
        // the last pair is a special error action
        short[] row = action_tab[state];
        short tokenId;
        // the expected tokens are all the symbols with a
        // corresponding action from the current parsing state
        for (int i = 0; i < row.length-2; ++i) {
            // Get tokenId and skip actionId
            tokenId = row[i++];
            expectedTokenIds.add(Integer.valueOf(tokenId));
        }
    }

    // Override to keep it from calling report_fatal_error()
    // This exception is not AnalysisException because we don't want this report to client.
    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws AnalysisException {
        throw new AnalysisException(getErrorTypeMessage(cur_token.sym));
    }


    // Manually throw a parse error on a given symbol for special circumstances.
    public void parseError(String symbolName, int symbolId) throws AnalysisException {
        Symbol errorToken = getSymbolFactory().newSymbol(symbolName, symbolId,
                ((Symbol) stack.peek()), ((Symbol) stack.peek()), null);
        // Call syntax error to gather information about expected tokens, etc.
        // syntax_error does not throw an exception
        syntax_error(errorToken);

        unrecovered_syntax_error(errorToken);
    }

    // Returns error string, consisting of the original
    // stmt with a '^' under the offending token. Assumes
    // that parse() has been called and threw an exception
    public String getErrorMsg(String stmt) {
        if (errorToken == null || stmt == null) {
            return null;
        }
        String[] lines = stmt.split("\n", -1);
        StringBuffer result = new StringBuffer();
        result.append(getErrorTypeMessage(errorToken.sym) + " in line ");
        result.append(errorToken.left);
        result.append(":\n");

        // errorToken_.left is the line number of error.
        // errorToken_.right is the column number of the error.
        // index is start from 0, so "minus 1" is the real error line idx
        String errorLine = lines[errorToken.left - 1];
        // If the error is that additional tokens are expected past the end,
        // errorToken_.right will be past the end of the string.
        int lastCharIndex = Math.min(errorLine.length(), errorToken.right);
        int maxPrintLength = 60;
        int errorLoc = 0;
        if (errorLine.length() <= maxPrintLength) {
            // The line is short. Print the entire line.
            result.append(errorLine);
            result.append('\n');
            errorLoc = errorToken.right;
        } else {
            // The line is too long. Print maxPrintLength/2 characters before the error and
            // after the error.
            int contextLength = maxPrintLength / 2 - 3;
            String leftSubStr;
            if (errorToken.right > maxPrintLength / 2) {
                leftSubStr = "..." + errorLine.substring(errorToken.right - contextLength,
                        lastCharIndex);
            } else {
                leftSubStr = errorLine.substring(0, errorToken.right);
            }
            errorLoc = leftSubStr.length();
            result.append(leftSubStr);
            if (errorLine.length() - errorToken.right > maxPrintLength / 2) {
                result.append(errorLine.substring(errorToken.right,
                            errorToken.right + contextLength) + "...");
            } else {
                result.append(errorLine.substring(lastCharIndex));
            }
            result.append("\n");
        }

        // print error indicator
        for (int i = 0; i < errorLoc - 1; ++i) {
            result.append(' ');
        }
        result.append("^\n");

        // only report encountered and expected tokens for syntax errors
        if (errorToken.sym == SqlParserSymbols.UNMATCHED_STRING_LITERAL ||
                errorToken.sym == SqlParserSymbols.NUMERIC_OVERFLOW) {
            return result.toString();
        }

        // append last encountered token
        result.append("Encountered: ");
        String lastToken = SqlScanner.tokenIdMap.get(Integer.valueOf(errorToken.sym));
        if (lastToken != null) {
            result.append(lastToken);
        } else if (SqlScanner.isKeyword((String) errorToken.value)) {
            result.append("A reserved word cannot be used as an identifier: ").append((String) errorToken.value);
        } else {
            result.append("Unknown last token with id: " + errorToken.sym);
        }

        // Append expected tokens
        result.append('\n');
        result.append("Expected: ");
        String expectedToken = null;
        Integer tokenId = null;
        for (int i = 0; i < expectedTokenIds.size(); ++i) {
            tokenId = expectedTokenIds.get(i);
            // keywords hints
            if (SqlScanner.isKeyword(lastToken) && tokenId.intValue() == SqlParserSymbols.IDENT) {
                result.append(String.format("%s is keyword, maybe `%s`", lastToken, lastToken) + ", ");
                continue;
            }

            if (reportExpectedToken(tokenId)) {
                expectedToken = SqlScanner.tokenIdMap.get(tokenId);
                result.append(expectedToken + ", ");
            }
        }
        // remove trailing ", "
        result.delete(result.length() - 2, result.length());
        result.append('\n');

        return result.toString();
    }

:};

// Total keywords
terminal String KW_SHOW, KW_ADD, KW_SCHEMAS, KW_SCHEMA, KW_OR, KW_PIPE, KW_USE, KW_SELECT, KW_FROM, KW_VALUES, KW_VIEW, KW_AS,
    KW_TABLE, KW_TABLES, KW_CREATE, KW_DATABASE, KW_COLON, KW_DATABASES, KW_UNION, KW_ALL, KW_INTERSECT, KW_EXCEPT, KW_MINUS,
    KW_DESCRIBE, KW_DROP;

terminal COMMA, COLON, DOT, DOTDOTDOT, AT, STAR, LPAREN, RPAREN, SEMICOLON, LBRACKET, RBRACKET, DIVIDE, MOD, ADD, SUBTRACT;
terminal BITAND, BITOR, BITXOR, BITNOT;
terminal EQUAL, NOT, LESSTHAN, GREATERTHAN, SET_VAR;
terminal String IDENT;
terminal String NUMERIC_OVERFLOW;
terminal Long INTEGER_LITERAL;
terminal String LARGE_INTEGER_LITERAL;
terminal Double FLOATINGPOINT_LITERAL;
terminal BigDecimal DECIMAL_LITERAL;
terminal String STRING_LITERAL;
terminal String UNMATCHED_STRING_LITERAL;

// Statement that the result of this parser.
nonterminal ParseNode stmt, show_stmt, show_param, use_stmt, add_schema_stmt, describe_table_stmt, drop_schema_stmt;
nonterminal String ident;

precedence nonassoc STRING_LITERAL;
precedence nonassoc COLON;

start with stmt;

stmt ::=
    show_stmt:stmt
    {:
        RESULT = stmt;
    :}
    | use_stmt:stmt
    {:
        RESULT = stmt;
    :}
    | add_schema_stmt:stmt
    {:
        RESULT = stmt;
    :}
    | describe_table_stmt:stmt
    {:
        RESULT = stmt;
    :}
    | drop_schema_stmt:stmt
    {:
        RESULT = stmt;
    :}
    ;

show_stmt ::=
    KW_SHOW show_param:stmt
    {:
        RESULT = stmt;
    :}
    ;

show_param ::=
    KW_SCHEMAS
    {:
        RESULT = new ShowSchemaStmt();
    :}
    | KW_DATABASES
    {:
        RESULT = new ShowSchemaStmt();
    :}
    | KW_TABLES
    {:
        RESULT = new ShowTableStmt();
    :}
    ;

// Change schema
use_stmt ::=
    KW_USE ident:db
    {:
        RESULT = new UseStmt(db);
    :}
    ;

add_schema_stmt ::=
    KW_ADD KW_SCHEMA ident:schemaName STRING_LITERAL:schemaParam
    {:
        RESULT = new AddSchemaStmt(schemaName, schemaParam);
    :}
    ;

drop_schema_stmt ::=
    KW_DROP KW_SCHEMA ident:schemaName
    {:
        RESULT = new DropSchemaStmt(schemaName);
    :}
    ;

describe_table_stmt ::=
    KW_DESCRIBE ident:tableName
    {:
        RESULT = new DescribeTableStmt(tableName);
    :}
    ;

ident ::=
    IDENT:id
    {:
        RESULT = id;
    :}
    ;
